@model Expense_Tracker.Models.Transaction

@{
    ViewData["Title"] = Model.TransactionId == 0 ? "Create Transaction" : "Edit Transaction";
    var currencies = new Dictionary<string, string>
    {
        {"USD", "USD ($)"},
        {"EUR", "EUR (€)"},
        {"BGN", "BGN (лв)"}
    };
}

<div class="row">
    <div class="col-md-7 mx-auto">
        <div class="glass-card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="mb-0">@ViewData["Title"]</h2>
                    <a asp-action="Index" class="btn btn-outline-light">
                        <i class="bi bi-arrow-left"></i> Back to List
                    </a>
                </div>
            </div>
            <div class="card-body">
                <form asp-action="AddOrEdit" method="post" id="transactionForm">
                    <div asp-validation-summary="All" class="text-danger mb-4"></div>
                    <input type="hidden" asp-for="TransactionId" />
                    <input type="hidden" asp-for="Date" value="@(Model.Date != default ? Model.Date : DateTime.Now)" />

                    <div class="form-group mb-4">
                        <label asp-for="CategoryId" class="form-label">Category</label>
                        <select asp-for="CategoryId" class="form-select bg-transparent" required>
                            <option value="">Choose a Category</option>
                            @foreach (var category in ViewBag.Categories)
                            {
                                <option value="@category.CategoryId" selected="@(Model.CategoryId == category.CategoryId)">
                                    @if (!string.IsNullOrEmpty(category.Icon))
                                    {
                                        <i class="bi @category.Icon"></i>
                                    }
                                    @category.Title
                                </option>
                            }
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-8">
                            <div class="form-group">
                                <label asp-for="Amount" class="form-label">Amount</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-transparent">
                                        <i class="bi bi-currency-dollar"></i>
                                    </span>
                                    <input asp-for="Amount" 
                                           class="form-control bg-transparent" 
                                           type="number" 
                                           step="0.01"
                                           min="0.01"
                                           value="@(Model?.Amount.ToString("0.00"))"
                                           required />
                                </div>
                                <span asp-validation-for="Amount" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label asp-for="Currency" class="form-label">Currency</label>
                                <select asp-for="Currency" class="form-select bg-transparent" required>
                                    @foreach (var currency in currencies)
                                    {
                                        <option value="@currency.Key" selected="@(currency.Key == Model.Currency)">
                                            @currency.Value
                                        </option>
                                    }
                                </select>
                                <span asp-validation-for="Currency" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-group mb-4">
                        <label asp-for="Note" class="form-label">Note</label>
                        <textarea asp-for="Note" class="form-control bg-transparent" rows="3" placeholder="Add a note (optional)"></textarea>
                        <span asp-validation-for="Note" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="bi bi-check-circle"></i> Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('transactionForm');
            const amountInput = form.querySelector('input[type="number"]');

            // Format amount on blur
            amountInput.addEventListener('blur', function() {
                if (this.value) {
                    this.value = parseFloat(this.value).toFixed(2);
                }
            });

            // Client-side validation
            form.addEventListener('submit', function(e) {
                let isValid = true;
                const amount = parseFloat(amountInput.value);
                const category = form.querySelector('select[name="CategoryId"]').value;

                if (!amount || amount <= 0) {
                    e.preventDefault();
                    alert('Please enter a valid amount greater than 0');
                    isValid = false;
                }

                if (!category) {
                    e.preventDefault();
                    alert('Please select a category');
                    isValid = false;
                }

                return isValid;
            });
        });
    </script>

    <style>
        .glass-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 16px;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card-header {
            background: rgba(255, 255, 255, 0.05);
            padding: 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card-body {
            padding: 1.5rem;
        }

        .form-control, .form-select {
            border-color: rgba(255, 255, 255, 0.1);
        }

        .form-control:focus, .form-select:focus {
            background: rgba(255, 255, 255, 0.05);
            border-color: var(--bs-primary);
            box-shadow: none;
            color: var(--bs-light);
        }

        .form-control::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .input-group-text {
            border-color: rgba(255, 255, 255, 0.1);
            color: var(--bs-light);
        }

        /* Hide number input spinners */
        input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        input[type="number"] {
            -moz-appearance: textfield;
        }

        .text-danger {
            color: #ff6b6b !important;
        }

        /* Add error state styling */
        .form-control.input-validation-error,
        .form-select.input-validation-error {
            border-color: #ff6b6b;
            background-color: rgba(255, 107, 107, 0.1);
        }
    </style>
} 